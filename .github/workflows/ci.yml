name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    #  Sundays at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch: # Allow manual triggers

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --all --locked
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Run tests
        run: |
          cargo nextest run --all-features --all-targets --locked
          cargo test --doc --locked

  msrv:
    name: MSRV (1.85)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Rust toolchain (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.85.0
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Check build with MSRV
        run: cargo build --all-features --locked
      - name: Run tests with MSRV
        run: cargo test --all-features --locked

  feature-builds:
    name: Feature Build (${{ matrix.feature }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        feature:
          - default
          - minimal
          - json
          - fancy
          - prompt-demand
          - wasm
          - all
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build with features
        run: |
          case "${{ matrix.feature }}" in
            default)
              cargo build --locked
              ;;
            minimal)
              cargo build --no-default-features --locked
              ;;
            json)
              cargo build --no-default-features --features json --locked
              ;;
            fancy)
              cargo build --no-default-features --features fancy --locked
              ;;
            prompt-demand)
              cargo build --no-default-features --features prompt-demand --locked
              ;;
            wasm)
              cargo build --no-default-features --features wasm --locked
              ;;
            all)
              cargo build --all-features --locked
              ;;
          esac

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build documentation (no features)
        run: cargo doc --no-deps --no-default-features --locked
      - name: Build documentation (default features)
        run: cargo doc --no-deps --locked
      - name: Build documentation (all features)
        run: cargo doc --no-deps --all-features --locked

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: EmbarkStudios/cargo-deny-action@v2

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Generate coverage
        run: |
          cargo +nightly tarpaulin --all-features --workspace --timeout 120 --out xml --tests --engine llvm
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          verbose: true
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  lint-unwrap:
    name: Lint Unwrap Patterns
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Check for unwrap/expect outside tests
        run: |
          # Find .rs files, exclude tests, check for unwrap/expect
          find src -name "*.rs" -type f | while read -r file; do
            # Skip if file is in a test module or has #[cfg(test)]
            if ! grep -q "#\[cfg(test)\]" "$file" && ! echo "$file" | grep -q "tests\.rs"; then
              if grep -n "\.unwrap()\|\.expect(" "$file" | grep -v "^[[:space:]]*//"; then
                echo "ERROR: Found unwrap/expect in non-test code in $file"
                exit 1
              fi
            fi
          done
        shell: bash

